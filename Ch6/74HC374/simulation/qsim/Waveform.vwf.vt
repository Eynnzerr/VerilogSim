// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/25/2021 11:50:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          reg74HC374
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module reg74HC374_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CP;
reg [7:0] D;
reg OE;
// wires                                               
wire [7:0] Q;

// assign statements (if any)                          
reg74HC374 i1 (
// port map - connection between master ports and signals/registers   
	.CP(CP),
	.D(D),
	.OE(OE),
	.Q(Q)
);
initial 
begin 
#1000000 $finish;
end 

// CP
always
begin
	CP = 1'b0;
	CP = #10000 1'b1;
	#10000;
end 

// D[0]
initial
begin
	D[0] = 1'b1;
	D[0] = #180000 1'b0;
	D[0] = #130000 1'b1;
	D[0] = #190000 1'b0;
	D[0] = #170000 1'b1;
end 

// D[1]
initial
begin
	D[1] = 1'b1;
	D[1] = #180000 1'b0;
	D[1] = #60000 1'b1;
	D[1] = #100000 1'b0;
	D[1] = #150000 1'b1;
	D[1] = #240000 1'b0;
end 

// D[2]
initial
begin
	D[2] = 1'b0;
	D[2] = #240000 1'b1;
	D[2] = #100000 1'b0;
	D[2] = #90000 1'b1;
	D[2] = #180000 1'b0;
	D[2] = #140000 1'b1;
	D[2] = #200000 1'b0;
end 

// D[3]
initial
begin
	D[3] = 1'b0;
	D[3] = #10000 1'b1;
	D[3] = #150000 1'b0;
	D[3] = #50000 1'b1;
	D[3] = #170000 1'b0;
	D[3] = #260000 1'b1;
	D[3] = #150000 1'b0;
end 

// D[4]
initial
begin
	D[4] = 1'b1;
	D[4] = #240000 1'b0;
	D[4] = #100000 1'b1;
	D[4] = #190000 1'b0;
end 

// D[5]
initial
begin
	D[5] = 1'b0;
	D[5] = #110000 1'b1;
	D[5] = #180000 1'b0;
	D[5] = #280000 1'b1;
	D[5] = #250000 1'b0;
end 

// D[6]
initial
begin
	D[6] = 1'b1;
	D[6] = #170000 1'b0;
	D[6] = #100000 1'b1;
	D[6] = #160000 1'b0;
	D[6] = #80000 1'b1;
	D[6] = #140000 1'b0;
	D[6] = #240000 1'b1;
end 

// D[7]
initial
begin
	D[7] = 1'b0;
	D[7] = #80000 1'b1;
	D[7] = #280000 1'b0;
	D[7] = #530000 1'b1;
end 

// OE
initial
begin
	OE = 1'b0;
	OE = #70000 1'b1;
	OE = #720000 1'b0;
end 
endmodule

