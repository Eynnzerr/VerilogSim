// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2021 21:21:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          shift74HC194
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module shift74HC194_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CP;
reg CR;
reg [3:0] D;
reg Dsl;
reg Dsr;
reg S0;
reg S1;
// wires                                               
wire [3:0] Q;

// assign statements (if any)                          
shift74HC194 i1 (
// port map - connection between master ports and signals/registers   
	.CP(CP),
	.CR(CR),
	.D(D),
	.Dsl(Dsl),
	.Dsr(Dsr),
	.Q(Q),
	.S0(S0),
	.S1(S1)
);
initial 
begin 
#1000000 $finish;
end 

// CP
always
begin
	CP = 1'b0;
	CP = #10000 1'b1;
	#10000;
end 

// CR
initial
begin
	CR = 1'b1;
	CR = #30000 1'b0;
	CR = #20000 1'b1;
end 

// Dsl
initial
begin
	Dsl = 1'b0;
end 

// Dsr
initial
begin
	Dsr = 1'b1;
end 

// S0
initial
begin
	S0 = 1'b0;
	S0 = #70000 1'b1;
	S0 = #20000 1'b0;
	S0 = #260000 1'b1;
	S0 = #20000 1'b0;
end 

// S1
initial
begin
	S1 = 1'b0;
	S1 = #70000 1'b1;
	S1 = #20000 1'b0;
	S1 = #120000 1'b1;
	S1 = #20000 1'b0;
end 

// D[0]
initial
begin
	D[0] = 1'b0;
end 

// D[1]
initial
begin
	D[1] = 1'b1;
	D[1] = #160000 1'b0;
end 

// D[2]
initial
begin
	D[2] = 1'b0;
end 

// D[3]
initial
begin
	D[3] = 1'b1;
	D[3] = #160000 1'b0;
end 
endmodule

